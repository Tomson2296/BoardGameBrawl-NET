// <auto-generated />
using System;
using BoardGameBrawl.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoardGameBrawl.Persistence.Migrations.MainApp
{
    [DbContext(typeof(MainAppDBContext))]
    partial class MainAppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoardGameBrawl.Domain.Common.BaseEntities.BaseMatchEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardgameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("MatchDate_Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("MatchDate_Ended")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("MatchDate_Started")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MatchProgress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardgameId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AverageBGGWeight")
                        .HasColumnType("real");

                    b.Property<float>("AverageRating")
                        .HasColumnType("real");

                    b.Property<int>("BGGId")
                        .HasColumnType("int");

                    b.Property<float>("BayesRating")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("MaxPlayers")
                        .HasColumnType("tinyint");

                    b.Property<short>("MaximumPlayingTime")
                        .HasColumnType("smallint");

                    b.Property<byte>("MinAge")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinPlayers")
                        .HasColumnType("tinyint");

                    b.Property<short>("MinimumPlayingTime")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Owned")
                        .HasColumnType("int");

                    b.Property<short>("PlayingTime")
                        .HasColumnType("smallint");

                    b.Property<short>("YearPublished")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BGGId")
                        .IsUnique()
                        .HasDatabaseName("BGGIdIndex");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("BoardgameNameIndex");

                    b.ToTable("Boardgames", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .IsUnique()
                        .HasDatabaseName("BoardgameCategoryIndex");

                    b.ToTable("BoardgameCategories", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameCategoryTag", b =>
                {
                    b.Property<Guid>("BoardgameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoardgameName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("BoardgameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BoardgameCategoryTags", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Domain")
                        .IsUnique()
                        .HasDatabaseName("DomainIndex");

                    b.ToTable("BoardgameDomains", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameDomainTag", b =>
                {
                    b.Property<Guid>("BoardgameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoardgameName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("BoardgameId", "DomainId");

                    b.HasIndex("DomainId");

                    b.ToTable("BoardgameDomainTags", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameMechanic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mechanic")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Mechanic")
                        .IsUnique()
                        .HasDatabaseName("BoardgameMechanicIndex");

                    b.ToTable("BoardgameMechanics", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameMechanicTag", b =>
                {
                    b.Property<Guid>("BoardgameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MechanicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoardgameName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MechanicName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("BoardgameId", "MechanicId");

                    b.HasIndex("MechanicId");

                    b.ToTable("BoardgameMechanicTags", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameModerator", b =>
                {
                    b.Property<Guid>("BoardgameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModeratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoardgameName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModeratorName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("BoardgameId", "ModeratorId");

                    b.HasIndex("ModeratorId");

                    b.ToTable("BoardgameModerators", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Group_Related.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GroupDescription")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<byte[]>("GroupMiniature")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("GroupName")
                        .IsUnique()
                        .HasDatabaseName("GroupNameIndex");

                    b.ToTable("Groups", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Group_Related.GroupParticipant", b =>
                {
                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("GroupId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GroupParticipants", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Match_Related.MatchParticipant", b =>
                {
                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MatchPlayerRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchParticipants", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Match_Related.MatchResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppliedAdditionMatchDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppliedVictoryConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MatchRuleSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlayerScores")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.HasIndex("MatchRuleSetId");

                    b.HasIndex("WinnerId");

                    b.ToTable("MatchResults", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Match_Related.MatchRuleSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalMatchDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BoardgameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VictoryConditions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardgameId")
                        .IsUnique();

                    b.ToTable("MatchRules", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BGGUsername")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("UserAvatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserDescription")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasDatabaseName("ApplicationUserIdIndex");

                    b.HasIndex("BGGUsername")
                        .IsUnique()
                        .HasDatabaseName("BGGUsernameIndex")
                        .HasFilter("[BGGUsername] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UserEmailIndex");

                    b.HasIndex("PlayerName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Players", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.PlayerCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoardgameCollection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsCollectionCreated")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique()
                        .HasDatabaseName("PlayerIndex");

                    b.ToTable("PlayerCollections", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.PlayerFavouriteBG", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardgameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoardgameName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PlayerId", "BoardgameId");

                    b.HasIndex("BoardgameId");

                    b.ToTable("PlayerFavouriteBoardgames", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.PlayerFriend", b =>
                {
                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddresseeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddresseeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("FriendshipDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RequesterName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequesterId", "AddresseeId");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("AddresseeName")
                        .HasDatabaseName("AddresseeNameIndex");

                    b.HasIndex("RequesterName")
                        .HasDatabaseName("RequesterNameIndex");

                    b.ToTable("PlayerFriends", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.PlayerRating", b =>
                {
                    b.Property<Guid>("BoardgameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EloRating")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("BoardgameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerRatings", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Preference_Related.PlayerPreference", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardgameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoardgameName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.HasKey("PlayerId", "BoardgameId");

                    b.HasIndex("BoardgameId");

                    b.ToTable("PlayerPreferences", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Schedule_Related.DailyAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlayerScheduleId");

                    b.ToTable("DailyAvailabilities", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Schedule_Related.PlayerSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique()
                        .HasDatabaseName("PlayerIndex");

                    b.ToTable("PlayerSchedules", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Schedule_Related.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DailyAvailabilityId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DailyAvailabilityId");

                    b.ToTable("TimeSlots", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Tournament_Related.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardgameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<short>("MaxNumberOfPlayers")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("TournamentDate_Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("TournamentDate_Ended")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TournamentDate_Started")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TournamentName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TournnamentProgress")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardgameId");

                    b.ToTable("Tournaments", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Tournament_Related.TournamentMatchParticipant", b =>
                {
                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MatchPlayerRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TournamentMatchParticipants", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Tournament_Related.TournamentParticipant", b =>
                {
                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TournamentUserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TournamentParticipants", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Match_Related.Match", b =>
                {
                    b.HasBaseType("BoardGameBrawl.Domain.Common.BaseEntities.BaseMatchEntity");

                    b.ToTable("Matches", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Tournament_Related.TournamentMatch", b =>
                {
                    b.HasBaseType("BoardGameBrawl.Domain.Common.BaseEntities.BaseMatchEntity");

                    b.Property<short>("MatchNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentMatches", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Common.BaseEntities.BaseMatchEntity", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", "Boardgame")
                        .WithMany("Matches")
                        .HasForeignKey("BoardgameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boardgame");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameCategoryTag", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", "Boardgame")
                        .WithMany("BoardgameCategoryTags")
                        .HasForeignKey("BoardgameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameCategory", "Category")
                        .WithMany("BoardgameCategoryTags")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boardgame");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameDomainTag", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", "Boardgame")
                        .WithMany("BoardgameDomainTags")
                        .HasForeignKey("BoardgameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameDomain", "Domain")
                        .WithMany("BoardgameDomainTags")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boardgame");

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameMechanicTag", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", "Boardgame")
                        .WithMany("BoardgameMechanicTags")
                        .HasForeignKey("BoardgameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameMechanic", "Mechanic")
                        .WithMany("BoardgameMechanicTags")
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boardgame");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameModerator", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", "Boardgame")
                        .WithMany("BoardgameModerators")
                        .HasForeignKey("BoardgameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Moderator")
                        .WithMany("BoardgameModerators")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boardgame");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Group_Related.GroupParticipant", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Group_Related.Group", "Group")
                        .WithMany("GroupParticipants")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Player")
                        .WithMany("GroupParticipants")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Match_Related.MatchParticipant", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Match_Related.Match", "Match")
                        .WithMany("MatchParticipants")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Player")
                        .WithMany("MatchesParticipating")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Match_Related.MatchResult", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Common.BaseEntities.BaseMatchEntity", "Match")
                        .WithOne("MatchResult")
                        .HasForeignKey("BoardGameBrawl.Domain.Entities.Match_Related.MatchResult", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Match_Related.MatchRuleSet", "MatchRuleSet")
                        .WithMany("MatchesWithRuleSetUsed")
                        .HasForeignKey("MatchRuleSetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Winner")
                        .WithMany("MatchesWinning")
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Match");

                    b.Navigation("MatchRuleSet");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Match_Related.MatchRuleSet", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", "Boardgame")
                        .WithOne("BoardgameRuleSet")
                        .HasForeignKey("BoardGameBrawl.Domain.Entities.Match_Related.MatchRuleSet", "BoardgameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boardgame");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.PlayerCollection", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Player")
                        .WithOne("PlayerCollection")
                        .HasForeignKey("BoardGameBrawl.Domain.Entities.Player_Related.PlayerCollection", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.PlayerFavouriteBG", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", "Boardgame")
                        .WithMany("PlayerFavouriteBGs")
                        .HasForeignKey("BoardgameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Player")
                        .WithMany("PlayerFavouriteBGs")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boardgame");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.PlayerFriend", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Addressee")
                        .WithMany("FriendOfFriendships")
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Requester")
                        .WithMany("Friendships")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.PlayerRating", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", "Boardgame")
                        .WithMany("PlayerEloRatingsInGame")
                        .HasForeignKey("BoardgameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Player")
                        .WithMany("PlayerEloRatings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boardgame");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Preference_Related.PlayerPreference", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", "Boardgame")
                        .WithMany("PlayerPreferences")
                        .HasForeignKey("BoardgameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Player")
                        .WithMany("PlayerPreferences")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boardgame");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Schedule_Related.DailyAvailability", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Schedule_Related.PlayerSchedule", "PlayerSchedule")
                        .WithMany("DailyAvailabilities")
                        .HasForeignKey("PlayerScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerSchedule");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Schedule_Related.PlayerSchedule", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Player")
                        .WithOne("PlayerSchedule")
                        .HasForeignKey("BoardGameBrawl.Domain.Entities.Player_Related.Schedule_Related.PlayerSchedule", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Schedule_Related.TimeSlot", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Schedule_Related.DailyAvailability", "DailyAvailability")
                        .WithMany("TimeSlots")
                        .HasForeignKey("DailyAvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyAvailability");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Tournament_Related.Tournament", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", "Boardgame")
                        .WithMany("Tournaments")
                        .HasForeignKey("BoardgameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boardgame");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Tournament_Related.TournamentMatchParticipant", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Tournament_Related.TournamentMatch", "Match")
                        .WithMany("TournamentMatchParticipants")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Player")
                        .WithMany("TournamentMatchesParticipating")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Tournament_Related.TournamentParticipant", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Player_Related.Player", "Player")
                        .WithMany("TournamentParticipating")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Domain.Entities.Tournament_Related.Tournament", "Tournament")
                        .WithMany("TournamentParticipants")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Tournament_Related.TournamentMatch", b =>
                {
                    b.HasOne("BoardGameBrawl.Domain.Entities.Tournament_Related.Tournament", "Tournament")
                        .WithMany("TournamentMatches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Common.BaseEntities.BaseMatchEntity", b =>
                {
                    b.Navigation("MatchResult");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.Boardgame", b =>
                {
                    b.Navigation("BoardgameCategoryTags");

                    b.Navigation("BoardgameDomainTags");

                    b.Navigation("BoardgameMechanicTags");

                    b.Navigation("BoardgameModerators");

                    b.Navigation("BoardgameRuleSet");

                    b.Navigation("Matches");

                    b.Navigation("PlayerEloRatingsInGame");

                    b.Navigation("PlayerFavouriteBGs");

                    b.Navigation("PlayerPreferences");

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameCategory", b =>
                {
                    b.Navigation("BoardgameCategoryTags");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameDomain", b =>
                {
                    b.Navigation("BoardgameDomainTags");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Boardgame_Related.BoardgameMechanic", b =>
                {
                    b.Navigation("BoardgameMechanicTags");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Group_Related.Group", b =>
                {
                    b.Navigation("GroupParticipants");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Match_Related.MatchRuleSet", b =>
                {
                    b.Navigation("MatchesWithRuleSetUsed");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Player", b =>
                {
                    b.Navigation("BoardgameModerators");

                    b.Navigation("FriendOfFriendships");

                    b.Navigation("Friendships");

                    b.Navigation("GroupParticipants");

                    b.Navigation("MatchesParticipating");

                    b.Navigation("MatchesWinning");

                    b.Navigation("PlayerCollection");

                    b.Navigation("PlayerEloRatings");

                    b.Navigation("PlayerFavouriteBGs");

                    b.Navigation("PlayerPreferences");

                    b.Navigation("PlayerSchedule");

                    b.Navigation("TournamentMatchesParticipating");

                    b.Navigation("TournamentParticipating");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Schedule_Related.DailyAvailability", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Player_Related.Schedule_Related.PlayerSchedule", b =>
                {
                    b.Navigation("DailyAvailabilities");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Tournament_Related.Tournament", b =>
                {
                    b.Navigation("TournamentMatches");

                    b.Navigation("TournamentParticipants");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Match_Related.Match", b =>
                {
                    b.Navigation("MatchParticipants");
                });

            modelBuilder.Entity("BoardGameBrawl.Domain.Entities.Tournament_Related.TournamentMatch", b =>
                {
                    b.Navigation("TournamentMatchParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
